name: yoma-v3
services:
  postgres:
    image: postgres:16-alpine
    container_name: yoma-postgres
    # ports:
    #   - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=P@ssword1
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: root
  #   ports:
  #     - "80:80"

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres-init: # Initialise the local postgresql server by populating a test user and organisation(s) for local dev
    image: postgres:16-alpine
    container_name: postgres-init
    depends_on:
      postgres:
        condition: service_healthy
      yoma-api-health:
        condition: service_completed_successfully
    volumes:
      - ./cicd/scripts/postgressql-init/post.sql:/post.sql
    environment:
      PGHOST: postgres
      POSTGRES_PASSWORD: P@ssword1
      POSTGRES_USER: postgres
      POSTGRES_DB: yoma-dev
      PGPORT: 5432
    command: >
      bash -c "PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$PGHOST -U $$POSTGRES_USER -d $$POSTGRES_DB -f /post.sql"

  keycloak-init: # Initialise the local Keycloak server by adding the bcrypt & webhook provider
    image: curlimages/curl
    container_name: keycloak-init
    user: root
    command: |
      sh -c 'curl -L https://github.com/vymalo/keycloak-webhook/releases/download/v0.3.0/keycloak-webhook-0.3.0-all.jar \
      -o /opt/keycloak/providers/keycloak-webhook-0.3.0.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-webhook-0.3.0.jar && \
      cp /local-providers/keycloak-phone-provider.jar /opt/keycloak/providers/keycloak-phone-provider.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-phone-provider.jar /opt/keycloak/providers/keycloak-phone-provider.jar && \
      cp /local-providers/keycloak-phone-provider.resources.jar /opt/keycloak/providers/keycloak-phone-provider.resources.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-phone-provider.resources.jar /opt/keycloak/providers/keycloak-phone-provider.resources.jar && \
      cp /local-providers/keycloak-sms-provider-twilio.jar /opt/keycloak/providers/keycloak-sms-provider-twilio.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-sms-provider-twilio.jar /opt/keycloak/providers/keycloak-sms-provider-twilio.jar && \
      cp /local-providers/keycloak-sms-provider-dummy.jar /opt/keycloak/providers/keycloak-sms-provider-dummy.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-sms-provider-dummy.jar /opt/keycloak/providers/keycloak-sms-provider-dummy.jar'
    volumes:
      - keycloak:/opt/keycloak/providers
      - ../keycloak/providers:/local-providers # our custom JAR folder, mounted in a separate directory and copied to container

  keycloak-pg:
    image: postgres:16-alpine
    container_name: keycloak-pg
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak-pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 10s
      timeout: 5s
      retries: 3

  keycloak: # Local Keycloak server
    # https://github.com/adorsys/keycloak-config-cli/pull/928
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    environment:
      WEBHOOK_EVENTS_TAKEN: "LOGIN,REGISTER,UPDATE_PROFILE"
      WEBHOOK_HTTP_BASE_PATH: "http://yoma-api:5000/api/v3/keycloak"
      WEBHOOK_HTTP_AUTH_USERNAME: whAdmin
      WEBHOOK_HTTP_AUTH_PASSWORD: password
      KC_DB_URL: jdbc:postgresql://keycloak-pg/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HEALTH_ENABLED: true
      KC_HOSTNAME: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_LOG_LEVEL: INFO
      # Enable event logging for registration errors
      KC_EVENTS_ENABLED: "true"
      KC_EVENTS_LISTENERS: "jboss-logging"
      KC_EVENTS_INCLUDE_EVENTS: "REGISTER, REGISTER_ERROR"
    ports:
      - 0.0.0.0:8080:8080
    command:
      - "start-dev"
      - "--db=postgres"
      - "--features=declarative-user-profile"
      - "--spi-events-listener-jboss-logging-success-level=info"
      - "--spi-events-listener-jboss-logging-error-level=warn"
      # custom providers
      - "--spi-phone-default-service=dummy"
      # - "--spi-phone-default-service=twilio" # Which sms provider
      # - "--spi-message-sender-service-twilio-account=your_account_sid"
      # - "--spi-message-sender-service-twilio-token=your_auth_token"
      # - "--spi-message-sender-service-twilio-number=your_number"
      # - "--spi-phone-default-token-expires-in=60"  # sms expires, default 60 second
      # - "--spi-phone-default-source-hour-maximum=10" # How many send from ip address sms count in one hour, Zero is no limit. default 10
      # - "--spi-phone-default-target-hour-maximum=3" # How many send to phone number sms count in one hour, Zero is no limit, default 3
      # - "--spi-phone-default-[$realm-]duplicate-phone=false" # allow one phone register multi user, default: false
      - "--spi-phone-default-yoma-default-number-regex=^\\+?\\d+$" #Notice: will match after canonicalize number. eg: INTERNATIONAL: +41 44 668 18 00 , NATIONAL: 044 668 18 00 , E164: +41446681800
      # - "--spi-phone-default-[$realm-]valid-phone=true" # valid phone number, default: true
      # # whether to parse user-supplied phone numbers and put into canonical International E.163 format.  _Required for proper duplicate phone number detection_
      # - "--spi-phone-default-[$realm-]canonicalize-phone-numbers=E164" #[E164,INTERNATIONAL,NATIONAL,RFC3966], default: "" un-canonicalize;
      # # a default region to be used when parsing user-supplied phone numbers. Lookup codes at https://www.unicode.org/cldr/cldr-aux/charts/30/supplemental/territory_information.html
      # - "--spi-phone-default-[$realm-]phone-default-region=US" #default: use realm setting's default Locate;
      # # if compatible is true then search user will be use all format phone number
      # - "--spi-phone-default-[$realm-]compatible=false" #default: false
      # # Prevent 2FA from always happening for a period of time
      # - "--spi-phone-default-[$realm-]otp-expires=3600" #default: 60 * 60; 1 hour

    depends_on:
      keycloak-init:
        condition: service_completed_successfully
      keycloak-pg:
        condition: service_healthy
    volumes:
      - keycloak:/opt/keycloak/providers
      - ../keycloak/themes:/opt/keycloak/themes

  keycloak-health: # Wait for Keycloak to be ready before running keycloak-config service
    image: curlimages/curl
    container_name: keycloak-health
    restart: "no"
    command: /bin/sh -c "until curl -fsS http://keycloak:8080/health/ready; do sleep 5; done"
    depends_on:
      keycloak:
        condition: service_started

  keycloak-config: # Import Keycloak configuration
    image: adorsys/keycloak-config-cli:5.8.0-22.0.0
    container_name: keycloak-config
    environment:
      KEYCLOAK_URL: "http://keycloak:8080/"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_AVAILABILITYCHECK_ENABLED: "true"
      KEYCLOAK_AVAILABILITYCHECK_TIMEOUT: "120s"
      IMPORT_FILES_LOCATIONS: "/config/*.yaml"
      IMPORT_VALIDATE: "true"
      LOGGING_LEVEL_ROOT: "INFO"
      IMPORT_VAR_SUBSTITUTION_ENABLED: "true"
      IMPORT_CACHE_ENABLED: "false"
      # SPRING_CONFIG_IMPORT: /secrets/.decrypted~secret.yaml
      # Templating variables
      CLIENT_YOMA_API_URL: "http://localhost:5000"
      CLIENT_YOMA_WEB_URL: "http://localhost:3000"
      CLIENT_ATINGI_URL: "https://preprod.atingi.org"
      CLIENT_ATINGI_URL_REDIRECT: "https://keycloak-preprod.enovationaws.com/realms/master/broker/yoma-prod/endpoint"
      CLIENT_ATINGI_URL_POST_LOGOUT_REDIRECT: "https://keycloak-preprod.enovationaws.com/realms/master/broker/yoma-prod/endpoint"
      CLIENT_GOODWALL_URL: "https://www.goodwall.io"
      CLIENT_GOODWALL_URL_REDIRECT: "goodwallauth://yomaredirect"
      CLIENT_YOMA_API_SECRET: superSecretYomaApiClientSecret
      CLIENT_YOMA_WEB_SECRET: superSecretYomaWebClientSecret
      CLIENT_ATINGI_SECRET: superSecretAtingiClientSecret
      CLIENT_GOODWALL_SECRET: superSecretAtingiClientSecret
      SA_YOMA_API_PASSWORD: &KCAdminPassword superSecretYomaApiServiceAccountPassword
      SMTP_PASSWORD: superSecretSmtpPassword
    volumes:
      - ../keycloak/exports:/config
      - ./cicd/secrets:/secrets
    depends_on:
      keycloak-health:
        condition: service_completed_successfully
  #     sops:
  #       condition: service_completed_successfully

  # sops: # Decrypt secrets
  #   container_name: sops
  #   image: mozilla/sops:latest
  #   command:
  #     [
  #       "/bin/sh",
  #       "-c",
  #       "sops --config /secrets/.sops.yaml -d /secrets/secret.yaml > /secrets/.decrypted~secret.yaml",
  #     ]
  #   volumes:
  #     - ./cicd/secrets:/secrets
  #     - ~/.aws:/root/.aws

  keycloak-users:
    image: curlimages/curl
    container_name: keycloak-users
    environment:
      KC_BASE_URL: http://keycloak:8080
      KC_REALM: yoma
      KC_CLIENT_ID: admin-cli
      KC_ADMIN_USER: sa-yoma-api
      KC_ADMIN_PASSWORD: *KCAdminPassword
      KC_ADMIN_REALM: master
      ADMIN_USER: testadminuser@gmail.com
      ADMIN_USER_PASSWORD: P@ssword12
      ORG_ADMIN_USER: testorgadminuser@gmail.com
      ORG_ADMIN_USER_PASSWORD: P@ssword12
      TEST_USER: testuser@gmail.com
      TEST_USER_PASSWORD: P@ssword12
      YOMA_SYSTEM_USER: system@yoma.world
      YOMA_SYSTEM_USER_PASSWORD: P@ssword12

    user: 0:0 # because we need to install jq
    command:
      - /bin/sh
      - -c
      - /sbin/apk add jq && /bin/sh /scripts/users.sh
    volumes:
      - ../keycloak/scripts/users.sh:/scripts/users.sh
    depends_on:
      keycloak-config:
        condition: service_completed_successfully
      yoma-api-health:
        condition: service_completed_successfully

  yoma-api: # Local Yoma API server
    # platform: linux/amd64 # Until we get multi-arch docker images
    image: ${REGISTRY:-local}/yoma-api:${API_TAG:-latest}
    container_name: yoma-api
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Local
      ASPNETCORE_URLS: "http://+:5000"
      ConnectionStrings__SQLConnection: "Host=postgres;Port=5432;Database=yoma-dev;Username=postgres;Password=P@ssword1;SslMode=Prefer;Trust Server Certificate=True;Include Error Detail=true;"
      ConnectionStrings__RedisConnection: "redis:6379"
      Logging__LogLevel__Default: "Debug"
      Logging__LogLevel__Microsoft: "Debug"
      Logging__LogLevel__Microsoft.Hosting.Lifetime: "Information"
      Logging__LogLevel__Microsoft.EntityFrameworkCore: "Error"
      AllowedOrigins: "http://localhost:5000;http://localhost:3000;http://localhost:3001" # can be set to wildcard * to allow all hosts
    env_file:
      - env.secrets
    ports:
      - "0.0.0.0:5000:5000"
    volumes:
      - yoma:/root/.aspnet/DataProtection-Keys
      - ./src/application/Yoma.Core.Api/appsettings.Local.json:/api/appsettings.Local.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  yoma-api-health:
    image: curlimages/curl
    container_name: yoma-api-health
    restart: "no"
    command: >
      /bin/sh -c "
      until curl -fsS 'http://yoma-api:5000/api/v3/lookup/skill?PageNumber=1&PageSize=10' | grep '\"totalCount\":\s*[1-9][0-9]*' > /dev/null; do
        echo 'API data not populated yet.';
        sleep 5;
      done;
      echo 'API data populated. Health check passed.'"
    depends_on:
      yoma-api:
        condition: service_started

  test-harness-health: # Wait for sqlserver-init to be finished.
    image: curlimages/curl
    container_name: test-harness-health
    restart: "no"
    command: /bin/sh -c "until curl -fsS http://yoma-api:5000/index.html; do sleep 5; done"
    depends_on:
      postgres-init:
        condition: service_completed_successfully
      keycloak-users:
        condition: service_completed_successfully

volumes:
  postgres:
  yoma:
  keycloak:
  keycloak-pg:
