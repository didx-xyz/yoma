import { type GetServerSidePropsContext } from "next";
import ApiClient from "~/lib/axiosClient";
import ApiServer from "~/lib/axiosServer";
import { type ApiResponse } from "../models/common";
import {
  type FullOpportunityResponseDto,
  type Opportunity,
} from "../models/opportunity";

export const getOpportunities = async (
  context: GetServerSidePropsContext,
  organisationId: string,
): Promise<FullOpportunityResponseDto[]> => {
  const { data } = await ApiServer(context).get<
    ApiResponse<FullOpportunityResponseDto[]>
  >(`/opportunities/organisation/${organisationId}`);

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};

export const getOpportunityById = async (
  context: GetServerSidePropsContext,
  id: string,
): Promise<FullOpportunityResponseDto> => {
  const { data } = await ApiServer(context).get<
    ApiResponse<FullOpportunityResponseDto>
  >(`opportunities/${id}`);

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};

export const getOpportunityById_Client = async (
  id: string,
): Promise<FullOpportunityResponseDto> => {
  const { data } = await ApiClient.get<ApiResponse<FullOpportunityResponseDto>>(
    `opportunities/${id}`,
  );

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};

export const createOpportunities = async (
  id: string,
  model: Opportunity
): Promise<FullOpportunityResponseDto> => {
  const { data } = await ApiClient.post<ApiResponse<FullOpportunityResponseDto>>(
    `/opportunities/YomaCreateOpportunity/`,
    model,
  );

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};

export const updateOpportunities = async (
  id: string,
  model: Opportunity
): Promise<FullOpportunityResponseDto> => {
  const { data } = await ApiClient.patch<ApiResponse<FullOpportunityResponseDto>>(
    `/opportunities/${id}`,
    model,
  );

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};
