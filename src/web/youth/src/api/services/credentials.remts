import { type GetServerSidePropsContext } from "next";
import { URLSearchParams } from "url";
import ApiClient from "~/lib/axiosClient";
import ApiServer from "~/lib/axiosServer";
import { type ApiResponse } from "../models/common";
import {
  type CredentialResponseDto,
  type ParticipantCredentialResponseDto,
  type UpdateCredentialRequestDto,
} from "../models/credential";

export const getOpportunityParticipants = async (
  opportunityId: string,
  context?: GetServerSidePropsContext,
  verified?: boolean,
  approved?: boolean,
): Promise<ParticipantCredentialResponseDto[]> => {
  const params = new URLSearchParams();
  if (verified != null || verified != undefined)
    params.append("verified", verified ? "true" : "false");
  if (approved != null || approved != undefined)
    params.append("approved", approved ? "true" : "false");
  const url = `credentials/${opportunityId}/participants?${params.toString()}`;

  const { data } = context
    ? await ApiServer(context).get<
        ApiResponse<ParticipantCredentialResponseDto[]>
      >(url)
    : await ApiClient.get<ApiResponse<ParticipantCredentialResponseDto[]>>(url);

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};

// export const getOpportunityParticipants = async (
//   context: GetServerSidePropsContext,
//   opportunityId: string,
// ): Promise<ParticipantCredentialResponseDto[]> => {
//   const { data } = await ApiServer(context).get<
//     ApiResponse<ParticipantCredentialResponseDto[]>
//   >(`credentials/${opportunityId}/participants`);

//   if (!data.meta.success) throw new Error(data.meta.message);
//   return data.data;
// };

// export const getOpportunityParticipants_Client = async (
//   opportunityId: string,
// ): Promise<ParticipantCredentialResponseDto[]> => {
//   const { data } = await ApiClient.get<
//     ApiResponse<ParticipantCredentialResponseDto[]>
//   >(`credentials/${opportunityId}/participants`);

//   if (!data.meta.success) throw new Error(data.meta.message);
//   return data.data;
// };

export const updateCredential = async (
  userId: string,
  model: UpdateCredentialRequestDto,
): Promise<CredentialResponseDto> => {
  const { data } = await ApiClient.patch<ApiResponse<CredentialResponseDto>>(
    `/credentials/${userId}`,
    model,
  );

  if (!data.meta.success) throw new Error(data.meta.message);
  return data.data;
};
